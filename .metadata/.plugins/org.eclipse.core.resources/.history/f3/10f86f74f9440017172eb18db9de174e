package learnit.dsa.arrays;

/*
 * Given an integer find the immediate larger integer that that which is a palindrome, 
 * example 1234212 -> 1234321, 345676 -> 346643.
 * 3214123 -> 3215123
 * 321123 -> 322223
 */
public class LargerPalindrome {
	public static void main(String[] args) {
		LargerPalindrome largerPalindrome = new LargerPalindrome();
		System.out.println(largerPalindrome.nextPalindrome(121));
	}
	
	public String nextPalindrome(int num){
		if(num==0){
			return Integer.toString(1);
		}
		String numString = Integer.toString(num);
		if(numString.length()<2){
			return new StringBuffer(numString).append(numString).toString();
		}
		int midIndex = numString.length()/2;
		boolean odd = numString.length()%2!=0;
		String leftHalf = numString.substring(0,midIndex);
		String reverseLeft = reverse(leftHalf);
		if(!odd){
			if(Integer.parseInt(reverseLeft)>Integer.parseInt(leftHalf)){
				return new StringBuffer(leftHalf).append(reverseLeft).toString();
			}else{
				int incr = Integer.parseInt(leftHalf)+1;
				reverseLeft = reverse(Integer.toString(incr));
				return new StringBuffer(incr).append(reverseLeft).toString();
			}
		}else{
			if(Integer.parseInt(reverseLeft)>Integer.parseInt(leftHalf)){
				return new StringBuffer(numString.substring(0,midIndex+1)).append(reverseLeft).toString();
			}else{
				int incr = Integer.parseInt(numString.substring(0,midIndex+1))+1;
				return (new StringBuffer(incr).append(reverseLeft)).toString();
			}
		}
	}
	
	public String reverse(String inputString){
		char[] inputArray = inputString.toCharArray();
		char temp;
		for(int i = 0,j=inputArray.length-1;i<=j;i++,j--){
			temp = inputArray[i];
			inputArray[i] = inputArray[j];
			inputArray[j] = temp;
		}
		return new String(inputArray);	
	}
}
